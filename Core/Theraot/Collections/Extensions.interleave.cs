// <auto-generated />

#if FAT

using System;
using System.Collections.Generic;

namespace Theraot.Collections
{
    public static partial class Extensions
    {
        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            var ok = true;
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            var ok = true;
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            var ok = true;
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            var ok = true;
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            var ok = true;
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6, IEnumerable<T> arg7)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (arg7 == null)
            {
                throw new ArgumentNullException("arg7");
            }
            var ok = true;
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            using (var enumerator7 = arg7.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                    if (enumerator7.MoveNext())
                    {
                        yield return enumerator7.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6, IEnumerable<T> arg7, IEnumerable<T> arg8)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (arg7 == null)
            {
                throw new ArgumentNullException("arg7");
            }
            if (arg8 == null)
            {
                throw new ArgumentNullException("arg8");
            }
            var ok = true;
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            using (var enumerator7 = arg7.GetEnumerator())
            using (var enumerator8 = arg8.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                    if (enumerator7.MoveNext())
                    {
                        yield return enumerator7.Current;
                        ok = true;
                    }
                    if (enumerator8.MoveNext())
                    {
                        yield return enumerator8.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6, IEnumerable<T> arg7, IEnumerable<T> arg8, IEnumerable<T> arg9)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (arg7 == null)
            {
                throw new ArgumentNullException("arg7");
            }
            if (arg8 == null)
            {
                throw new ArgumentNullException("arg8");
            }
            if (arg9 == null)
            {
                throw new ArgumentNullException("arg9");
            }
            var ok = true;
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            using (var enumerator7 = arg7.GetEnumerator())
            using (var enumerator8 = arg8.GetEnumerator())
            using (var enumerator9 = arg9.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                    if (enumerator7.MoveNext())
                    {
                        yield return enumerator7.Current;
                        ok = true;
                    }
                    if (enumerator8.MoveNext())
                    {
                        yield return enumerator8.Current;
                        ok = true;
                    }
                    if (enumerator9.MoveNext())
                    {
                        yield return enumerator9.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6, IEnumerable<T> arg7, IEnumerable<T> arg8, IEnumerable<T> arg9, IEnumerable<T> arg10)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (arg7 == null)
            {
                throw new ArgumentNullException("arg7");
            }
            if (arg8 == null)
            {
                throw new ArgumentNullException("arg8");
            }
            if (arg9 == null)
            {
                throw new ArgumentNullException("arg9");
            }
            if (arg10 == null)
            {
                throw new ArgumentNullException("arg10");
            }
            var ok = true;
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            using (var enumerator7 = arg7.GetEnumerator())
            using (var enumerator8 = arg8.GetEnumerator())
            using (var enumerator9 = arg9.GetEnumerator())
            using (var enumerator10 = arg10.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                    if (enumerator7.MoveNext())
                    {
                        yield return enumerator7.Current;
                        ok = true;
                    }
                    if (enumerator8.MoveNext())
                    {
                        yield return enumerator8.Current;
                        ok = true;
                    }
                    if (enumerator9.MoveNext())
                    {
                        yield return enumerator9.Current;
                        ok = true;
                    }
                    if (enumerator10.MoveNext())
                    {
                        yield return enumerator10.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6, IEnumerable<T> arg7, IEnumerable<T> arg8, IEnumerable<T> arg9, IEnumerable<T> arg10, IEnumerable<T> arg11)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (arg7 == null)
            {
                throw new ArgumentNullException("arg7");
            }
            if (arg8 == null)
            {
                throw new ArgumentNullException("arg8");
            }
            if (arg9 == null)
            {
                throw new ArgumentNullException("arg9");
            }
            if (arg10 == null)
            {
                throw new ArgumentNullException("arg10");
            }
            if (arg11 == null)
            {
                throw new ArgumentNullException("arg11");
            }
            var ok = true;
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            using (var enumerator7 = arg7.GetEnumerator())
            using (var enumerator8 = arg8.GetEnumerator())
            using (var enumerator9 = arg9.GetEnumerator())
            using (var enumerator10 = arg10.GetEnumerator())
            using (var enumerator11 = arg11.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                    if (enumerator7.MoveNext())
                    {
                        yield return enumerator7.Current;
                        ok = true;
                    }
                    if (enumerator8.MoveNext())
                    {
                        yield return enumerator8.Current;
                        ok = true;
                    }
                    if (enumerator9.MoveNext())
                    {
                        yield return enumerator9.Current;
                        ok = true;
                    }
                    if (enumerator10.MoveNext())
                    {
                        yield return enumerator10.Current;
                        ok = true;
                    }
                    if (enumerator11.MoveNext())
                    {
                        yield return enumerator11.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6, IEnumerable<T> arg7, IEnumerable<T> arg8, IEnumerable<T> arg9, IEnumerable<T> arg10, IEnumerable<T> arg11, IEnumerable<T> arg12)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (arg7 == null)
            {
                throw new ArgumentNullException("arg7");
            }
            if (arg8 == null)
            {
                throw new ArgumentNullException("arg8");
            }
            if (arg9 == null)
            {
                throw new ArgumentNullException("arg9");
            }
            if (arg10 == null)
            {
                throw new ArgumentNullException("arg10");
            }
            if (arg11 == null)
            {
                throw new ArgumentNullException("arg11");
            }
            if (arg12 == null)
            {
                throw new ArgumentNullException("arg12");
            }
            var ok = true;
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            using (var enumerator7 = arg7.GetEnumerator())
            using (var enumerator8 = arg8.GetEnumerator())
            using (var enumerator9 = arg9.GetEnumerator())
            using (var enumerator10 = arg10.GetEnumerator())
            using (var enumerator11 = arg11.GetEnumerator())
            using (var enumerator12 = arg12.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                    if (enumerator7.MoveNext())
                    {
                        yield return enumerator7.Current;
                        ok = true;
                    }
                    if (enumerator8.MoveNext())
                    {
                        yield return enumerator8.Current;
                        ok = true;
                    }
                    if (enumerator9.MoveNext())
                    {
                        yield return enumerator9.Current;
                        ok = true;
                    }
                    if (enumerator10.MoveNext())
                    {
                        yield return enumerator10.Current;
                        ok = true;
                    }
                    if (enumerator11.MoveNext())
                    {
                        yield return enumerator11.Current;
                        ok = true;
                    }
                    if (enumerator12.MoveNext())
                    {
                        yield return enumerator12.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6, IEnumerable<T> arg7, IEnumerable<T> arg8, IEnumerable<T> arg9, IEnumerable<T> arg10, IEnumerable<T> arg11, IEnumerable<T> arg12, IEnumerable<T> arg13)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (arg7 == null)
            {
                throw new ArgumentNullException("arg7");
            }
            if (arg8 == null)
            {
                throw new ArgumentNullException("arg8");
            }
            if (arg9 == null)
            {
                throw new ArgumentNullException("arg9");
            }
            if (arg10 == null)
            {
                throw new ArgumentNullException("arg10");
            }
            if (arg11 == null)
            {
                throw new ArgumentNullException("arg11");
            }
            if (arg12 == null)
            {
                throw new ArgumentNullException("arg12");
            }
            if (arg13 == null)
            {
                throw new ArgumentNullException("arg13");
            }
            var ok = true;
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            using (var enumerator7 = arg7.GetEnumerator())
            using (var enumerator8 = arg8.GetEnumerator())
            using (var enumerator9 = arg9.GetEnumerator())
            using (var enumerator10 = arg10.GetEnumerator())
            using (var enumerator11 = arg11.GetEnumerator())
            using (var enumerator12 = arg12.GetEnumerator())
            using (var enumerator13 = arg13.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                    if (enumerator7.MoveNext())
                    {
                        yield return enumerator7.Current;
                        ok = true;
                    }
                    if (enumerator8.MoveNext())
                    {
                        yield return enumerator8.Current;
                        ok = true;
                    }
                    if (enumerator9.MoveNext())
                    {
                        yield return enumerator9.Current;
                        ok = true;
                    }
                    if (enumerator10.MoveNext())
                    {
                        yield return enumerator10.Current;
                        ok = true;
                    }
                    if (enumerator11.MoveNext())
                    {
                        yield return enumerator11.Current;
                        ok = true;
                    }
                    if (enumerator12.MoveNext())
                    {
                        yield return enumerator12.Current;
                        ok = true;
                    }
                    if (enumerator13.MoveNext())
                    {
                        yield return enumerator13.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6, IEnumerable<T> arg7, IEnumerable<T> arg8, IEnumerable<T> arg9, IEnumerable<T> arg10, IEnumerable<T> arg11, IEnumerable<T> arg12, IEnumerable<T> arg13, IEnumerable<T> arg14)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (arg7 == null)
            {
                throw new ArgumentNullException("arg7");
            }
            if (arg8 == null)
            {
                throw new ArgumentNullException("arg8");
            }
            if (arg9 == null)
            {
                throw new ArgumentNullException("arg9");
            }
            if (arg10 == null)
            {
                throw new ArgumentNullException("arg10");
            }
            if (arg11 == null)
            {
                throw new ArgumentNullException("arg11");
            }
            if (arg12 == null)
            {
                throw new ArgumentNullException("arg12");
            }
            if (arg13 == null)
            {
                throw new ArgumentNullException("arg13");
            }
            if (arg14 == null)
            {
                throw new ArgumentNullException("arg14");
            }
            var ok = true;
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            using (var enumerator7 = arg7.GetEnumerator())
            using (var enumerator8 = arg8.GetEnumerator())
            using (var enumerator9 = arg9.GetEnumerator())
            using (var enumerator10 = arg10.GetEnumerator())
            using (var enumerator11 = arg11.GetEnumerator())
            using (var enumerator12 = arg12.GetEnumerator())
            using (var enumerator13 = arg13.GetEnumerator())
            using (var enumerator14 = arg14.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                    if (enumerator7.MoveNext())
                    {
                        yield return enumerator7.Current;
                        ok = true;
                    }
                    if (enumerator8.MoveNext())
                    {
                        yield return enumerator8.Current;
                        ok = true;
                    }
                    if (enumerator9.MoveNext())
                    {
                        yield return enumerator9.Current;
                        ok = true;
                    }
                    if (enumerator10.MoveNext())
                    {
                        yield return enumerator10.Current;
                        ok = true;
                    }
                    if (enumerator11.MoveNext())
                    {
                        yield return enumerator11.Current;
                        ok = true;
                    }
                    if (enumerator12.MoveNext())
                    {
                        yield return enumerator12.Current;
                        ok = true;
                    }
                    if (enumerator13.MoveNext())
                    {
                        yield return enumerator13.Current;
                        ok = true;
                    }
                    if (enumerator14.MoveNext())
                    {
                        yield return enumerator14.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6, IEnumerable<T> arg7, IEnumerable<T> arg8, IEnumerable<T> arg9, IEnumerable<T> arg10, IEnumerable<T> arg11, IEnumerable<T> arg12, IEnumerable<T> arg13, IEnumerable<T> arg14, IEnumerable<T> arg15)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (arg7 == null)
            {
                throw new ArgumentNullException("arg7");
            }
            if (arg8 == null)
            {
                throw new ArgumentNullException("arg8");
            }
            if (arg9 == null)
            {
                throw new ArgumentNullException("arg9");
            }
            if (arg10 == null)
            {
                throw new ArgumentNullException("arg10");
            }
            if (arg11 == null)
            {
                throw new ArgumentNullException("arg11");
            }
            if (arg12 == null)
            {
                throw new ArgumentNullException("arg12");
            }
            if (arg13 == null)
            {
                throw new ArgumentNullException("arg13");
            }
            if (arg14 == null)
            {
                throw new ArgumentNullException("arg14");
            }
            if (arg15 == null)
            {
                throw new ArgumentNullException("arg15");
            }
            var ok = true;
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            using (var enumerator7 = arg7.GetEnumerator())
            using (var enumerator8 = arg8.GetEnumerator())
            using (var enumerator9 = arg9.GetEnumerator())
            using (var enumerator10 = arg10.GetEnumerator())
            using (var enumerator11 = arg11.GetEnumerator())
            using (var enumerator12 = arg12.GetEnumerator())
            using (var enumerator13 = arg13.GetEnumerator())
            using (var enumerator14 = arg14.GetEnumerator())
            using (var enumerator15 = arg15.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                    if (enumerator7.MoveNext())
                    {
                        yield return enumerator7.Current;
                        ok = true;
                    }
                    if (enumerator8.MoveNext())
                    {
                        yield return enumerator8.Current;
                        ok = true;
                    }
                    if (enumerator9.MoveNext())
                    {
                        yield return enumerator9.Current;
                        ok = true;
                    }
                    if (enumerator10.MoveNext())
                    {
                        yield return enumerator10.Current;
                        ok = true;
                    }
                    if (enumerator11.MoveNext())
                    {
                        yield return enumerator11.Current;
                        ok = true;
                    }
                    if (enumerator12.MoveNext())
                    {
                        yield return enumerator12.Current;
                        ok = true;
                    }
                    if (enumerator13.MoveNext())
                    {
                        yield return enumerator13.Current;
                        ok = true;
                    }
                    if (enumerator14.MoveNext())
                    {
                        yield return enumerator14.Current;
                        ok = true;
                    }
                    if (enumerator15.MoveNext())
                    {
                        yield return enumerator15.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6, IEnumerable<T> arg7, IEnumerable<T> arg8, IEnumerable<T> arg9, IEnumerable<T> arg10, IEnumerable<T> arg11, IEnumerable<T> arg12, IEnumerable<T> arg13, IEnumerable<T> arg14, IEnumerable<T> arg15, IEnumerable<T> arg16)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (arg7 == null)
            {
                throw new ArgumentNullException("arg7");
            }
            if (arg8 == null)
            {
                throw new ArgumentNullException("arg8");
            }
            if (arg9 == null)
            {
                throw new ArgumentNullException("arg9");
            }
            if (arg10 == null)
            {
                throw new ArgumentNullException("arg10");
            }
            if (arg11 == null)
            {
                throw new ArgumentNullException("arg11");
            }
            if (arg12 == null)
            {
                throw new ArgumentNullException("arg12");
            }
            if (arg13 == null)
            {
                throw new ArgumentNullException("arg13");
            }
            if (arg14 == null)
            {
                throw new ArgumentNullException("arg14");
            }
            if (arg15 == null)
            {
                throw new ArgumentNullException("arg15");
            }
            if (arg16 == null)
            {
                throw new ArgumentNullException("arg16");
            }
            var ok = true;
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            using (var enumerator7 = arg7.GetEnumerator())
            using (var enumerator8 = arg8.GetEnumerator())
            using (var enumerator9 = arg9.GetEnumerator())
            using (var enumerator10 = arg10.GetEnumerator())
            using (var enumerator11 = arg11.GetEnumerator())
            using (var enumerator12 = arg12.GetEnumerator())
            using (var enumerator13 = arg13.GetEnumerator())
            using (var enumerator14 = arg14.GetEnumerator())
            using (var enumerator15 = arg15.GetEnumerator())
            using (var enumerator16 = arg16.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                    if (enumerator7.MoveNext())
                    {
                        yield return enumerator7.Current;
                        ok = true;
                    }
                    if (enumerator8.MoveNext())
                    {
                        yield return enumerator8.Current;
                        ok = true;
                    }
                    if (enumerator9.MoveNext())
                    {
                        yield return enumerator9.Current;
                        ok = true;
                    }
                    if (enumerator10.MoveNext())
                    {
                        yield return enumerator10.Current;
                        ok = true;
                    }
                    if (enumerator11.MoveNext())
                    {
                        yield return enumerator11.Current;
                        ok = true;
                    }
                    if (enumerator12.MoveNext())
                    {
                        yield return enumerator12.Current;
                        ok = true;
                    }
                    if (enumerator13.MoveNext())
                    {
                        yield return enumerator13.Current;
                        ok = true;
                    }
                    if (enumerator14.MoveNext())
                    {
                        yield return enumerator14.Current;
                        ok = true;
                    }
                    if (enumerator15.MoveNext())
                    {
                        yield return enumerator15.Current;
                        ok = true;
                    }
                    if (enumerator16.MoveNext())
                    {
                        yield return enumerator16.Current;
                        ok = true;
                    }
                }
            }
        }
    }
}

#endif