// <auto-generated />

#if FAT

using System;
using System.Collections.Generic;

namespace Theraot.Collections
{
    public static partial class Extensions
    {
#if NET35
        public static IEnumerable<TReturn> Zip<T1, T2, TReturn>(this IEnumerable<T1> first, IEnumerable<T2> second, Func<T1, T2, TReturn> resultSelector)
#else
        public static IEnumerable<TReturn> Zip<T1, T2, TReturn>(IEnumerable<T1> first, IEnumerable<T2> second, Func<T1, T2, TReturn> resultSelector)
#endif
        {
            if (first == null)
            {
                throw new ArgumentNullException("first");
            }
            if (second == null)
            {
                throw new ArgumentNullException("second");
            }
            if (resultSelector == null)
            {
                throw new ArgumentNullException("resultSelector");
            }
            using (var enumerator1 = first.GetEnumerator())
            using (var enumerator2 = second.GetEnumerator())
            {
                while
                (
                    enumerator1.MoveNext()
                    && enumerator2.MoveNext()
                )
                {
                    yield return resultSelector
                    (
                        enumerator1.Current,
                        enumerator2.Current
                    );
                }
            }
        }

        public static IEnumerable<TReturn> Zip<T1, T2, T3, TReturn>(IEnumerable<T1> arg1, IEnumerable<T2> arg2, IEnumerable<T3> arg3, Func<T1, T2, T3, TReturn> resultSelector)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (resultSelector == null)
            {
                throw new ArgumentNullException("resultSelector");
            }
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            {
                while
                (
                    enumerator1.MoveNext()
                    && enumerator2.MoveNext()
                    && enumerator3.MoveNext()
                )
                {
                    yield return resultSelector
                    (
                        enumerator1.Current,
                        enumerator2.Current,
                        enumerator3.Current
                    );
                }
            }
        }

        public static IEnumerable<TReturn> Zip<T1, T2, T3, T4, TReturn>(IEnumerable<T1> arg1, IEnumerable<T2> arg2, IEnumerable<T3> arg3, IEnumerable<T4> arg4, Func<T1, T2, T3, T4, TReturn> resultSelector)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (resultSelector == null)
            {
                throw new ArgumentNullException("resultSelector");
            }
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            {
                while
                (
                    enumerator1.MoveNext()
                    && enumerator2.MoveNext()
                    && enumerator3.MoveNext()
                    && enumerator4.MoveNext()
                )
                {
                    yield return resultSelector
                    (
                        enumerator1.Current,
                        enumerator2.Current,
                        enumerator3.Current,
                        enumerator4.Current
                    );
                }
            }
        }

        public static IEnumerable<TReturn> Zip<T1, T2, T3, T4, T5, TReturn>(IEnumerable<T1> arg1, IEnumerable<T2> arg2, IEnumerable<T3> arg3, IEnumerable<T4> arg4, IEnumerable<T5> arg5, Func<T1, T2, T3, T4, T5, TReturn> resultSelector)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (resultSelector == null)
            {
                throw new ArgumentNullException("resultSelector");
            }
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            {
                while
                (
                    enumerator1.MoveNext()
                    && enumerator2.MoveNext()
                    && enumerator3.MoveNext()
                    && enumerator4.MoveNext()
                    && enumerator5.MoveNext()
                )
                {
                    yield return resultSelector
                    (
                        enumerator1.Current,
                        enumerator2.Current,
                        enumerator3.Current,
                        enumerator4.Current,
                        enumerator5.Current
                    );
                }
            }
        }

        public static IEnumerable<TReturn> Zip<T1, T2, T3, T4, T5, T6, TReturn>(IEnumerable<T1> arg1, IEnumerable<T2> arg2, IEnumerable<T3> arg3, IEnumerable<T4> arg4, IEnumerable<T5> arg5, IEnumerable<T6> arg6, Func<T1, T2, T3, T4, T5, T6, TReturn> resultSelector)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (resultSelector == null)
            {
                throw new ArgumentNullException("resultSelector");
            }
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            {
                while
                (
                    enumerator1.MoveNext()
                    && enumerator2.MoveNext()
                    && enumerator3.MoveNext()
                    && enumerator4.MoveNext()
                    && enumerator5.MoveNext()
                    && enumerator6.MoveNext()
                )
                {
                    yield return resultSelector
                    (
                        enumerator1.Current,
                        enumerator2.Current,
                        enumerator3.Current,
                        enumerator4.Current,
                        enumerator5.Current,
                        enumerator6.Current
                    );
                }
            }
        }

        public static IEnumerable<TReturn> Zip<T1, T2, T3, T4, T5, T6, T7, TReturn>(IEnumerable<T1> arg1, IEnumerable<T2> arg2, IEnumerable<T3> arg3, IEnumerable<T4> arg4, IEnumerable<T5> arg5, IEnumerable<T6> arg6, IEnumerable<T7> arg7, Func<T1, T2, T3, T4, T5, T6, T7, TReturn> resultSelector)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (arg7 == null)
            {
                throw new ArgumentNullException("arg7");
            }
            if (resultSelector == null)
            {
                throw new ArgumentNullException("resultSelector");
            }
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            using (var enumerator7 = arg7.GetEnumerator())
            {
                while
                (
                    enumerator1.MoveNext()
                    && enumerator2.MoveNext()
                    && enumerator3.MoveNext()
                    && enumerator4.MoveNext()
                    && enumerator5.MoveNext()
                    && enumerator6.MoveNext()
                    && enumerator7.MoveNext()
                )
                {
                    yield return resultSelector
                    (
                        enumerator1.Current,
                        enumerator2.Current,
                        enumerator3.Current,
                        enumerator4.Current,
                        enumerator5.Current,
                        enumerator6.Current,
                        enumerator7.Current
                    );
                }
            }
        }

        public static IEnumerable<TReturn> Zip<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>(IEnumerable<T1> arg1, IEnumerable<T2> arg2, IEnumerable<T3> arg3, IEnumerable<T4> arg4, IEnumerable<T5> arg5, IEnumerable<T6> arg6, IEnumerable<T7> arg7, IEnumerable<T8> arg8, Func<T1, T2, T3, T4, T5, T6, T7, T8, TReturn> resultSelector)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (arg7 == null)
            {
                throw new ArgumentNullException("arg7");
            }
            if (arg8 == null)
            {
                throw new ArgumentNullException("arg8");
            }
            if (resultSelector == null)
            {
                throw new ArgumentNullException("resultSelector");
            }
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            using (var enumerator7 = arg7.GetEnumerator())
            using (var enumerator8 = arg8.GetEnumerator())
            {
                while
                (
                    enumerator1.MoveNext()
                    && enumerator2.MoveNext()
                    && enumerator3.MoveNext()
                    && enumerator4.MoveNext()
                    && enumerator5.MoveNext()
                    && enumerator6.MoveNext()
                    && enumerator7.MoveNext()
                    && enumerator8.MoveNext()
                )
                {
                    yield return resultSelector
                    (
                        enumerator1.Current,
                        enumerator2.Current,
                        enumerator3.Current,
                        enumerator4.Current,
                        enumerator5.Current,
                        enumerator6.Current,
                        enumerator7.Current,
                        enumerator8.Current
                    );
                }
            }
        }

        public static IEnumerable<TReturn> Zip<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>(IEnumerable<T1> arg1, IEnumerable<T2> arg2, IEnumerable<T3> arg3, IEnumerable<T4> arg4, IEnumerable<T5> arg5, IEnumerable<T6> arg6, IEnumerable<T7> arg7, IEnumerable<T8> arg8, IEnumerable<T9> arg9, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn> resultSelector)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (arg7 == null)
            {
                throw new ArgumentNullException("arg7");
            }
            if (arg8 == null)
            {
                throw new ArgumentNullException("arg8");
            }
            if (arg9 == null)
            {
                throw new ArgumentNullException("arg9");
            }
            if (resultSelector == null)
            {
                throw new ArgumentNullException("resultSelector");
            }
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            using (var enumerator7 = arg7.GetEnumerator())
            using (var enumerator8 = arg8.GetEnumerator())
            using (var enumerator9 = arg9.GetEnumerator())
            {
                while
                (
                    enumerator1.MoveNext()
                    && enumerator2.MoveNext()
                    && enumerator3.MoveNext()
                    && enumerator4.MoveNext()
                    && enumerator5.MoveNext()
                    && enumerator6.MoveNext()
                    && enumerator7.MoveNext()
                    && enumerator8.MoveNext()
                    && enumerator9.MoveNext()
                )
                {
                    yield return resultSelector
                    (
                        enumerator1.Current,
                        enumerator2.Current,
                        enumerator3.Current,
                        enumerator4.Current,
                        enumerator5.Current,
                        enumerator6.Current,
                        enumerator7.Current,
                        enumerator8.Current,
                        enumerator9.Current
                    );
                }
            }
        }

        public static IEnumerable<TReturn> Zip<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>(IEnumerable<T1> arg1, IEnumerable<T2> arg2, IEnumerable<T3> arg3, IEnumerable<T4> arg4, IEnumerable<T5> arg5, IEnumerable<T6> arg6, IEnumerable<T7> arg7, IEnumerable<T8> arg8, IEnumerable<T9> arg9, IEnumerable<T10> arg10, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn> resultSelector)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (arg7 == null)
            {
                throw new ArgumentNullException("arg7");
            }
            if (arg8 == null)
            {
                throw new ArgumentNullException("arg8");
            }
            if (arg9 == null)
            {
                throw new ArgumentNullException("arg9");
            }
            if (arg10 == null)
            {
                throw new ArgumentNullException("arg10");
            }
            if (resultSelector == null)
            {
                throw new ArgumentNullException("resultSelector");
            }
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            using (var enumerator7 = arg7.GetEnumerator())
            using (var enumerator8 = arg8.GetEnumerator())
            using (var enumerator9 = arg9.GetEnumerator())
            using (var enumerator10 = arg10.GetEnumerator())
            {
                while
                (
                    enumerator1.MoveNext()
                    && enumerator2.MoveNext()
                    && enumerator3.MoveNext()
                    && enumerator4.MoveNext()
                    && enumerator5.MoveNext()
                    && enumerator6.MoveNext()
                    && enumerator7.MoveNext()
                    && enumerator8.MoveNext()
                    && enumerator9.MoveNext()
                    && enumerator10.MoveNext()
                )
                {
                    yield return resultSelector
                    (
                        enumerator1.Current,
                        enumerator2.Current,
                        enumerator3.Current,
                        enumerator4.Current,
                        enumerator5.Current,
                        enumerator6.Current,
                        enumerator7.Current,
                        enumerator8.Current,
                        enumerator9.Current,
                        enumerator10.Current
                    );
                }
            }
        }

        public static IEnumerable<TReturn> Zip<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>(IEnumerable<T1> arg1, IEnumerable<T2> arg2, IEnumerable<T3> arg3, IEnumerable<T4> arg4, IEnumerable<T5> arg5, IEnumerable<T6> arg6, IEnumerable<T7> arg7, IEnumerable<T8> arg8, IEnumerable<T9> arg9, IEnumerable<T10> arg10, IEnumerable<T11> arg11, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn> resultSelector)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (arg7 == null)
            {
                throw new ArgumentNullException("arg7");
            }
            if (arg8 == null)
            {
                throw new ArgumentNullException("arg8");
            }
            if (arg9 == null)
            {
                throw new ArgumentNullException("arg9");
            }
            if (arg10 == null)
            {
                throw new ArgumentNullException("arg10");
            }
            if (arg11 == null)
            {
                throw new ArgumentNullException("arg11");
            }
            if (resultSelector == null)
            {
                throw new ArgumentNullException("resultSelector");
            }
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            using (var enumerator7 = arg7.GetEnumerator())
            using (var enumerator8 = arg8.GetEnumerator())
            using (var enumerator9 = arg9.GetEnumerator())
            using (var enumerator10 = arg10.GetEnumerator())
            using (var enumerator11 = arg11.GetEnumerator())
            {
                while
                (
                    enumerator1.MoveNext()
                    && enumerator2.MoveNext()
                    && enumerator3.MoveNext()
                    && enumerator4.MoveNext()
                    && enumerator5.MoveNext()
                    && enumerator6.MoveNext()
                    && enumerator7.MoveNext()
                    && enumerator8.MoveNext()
                    && enumerator9.MoveNext()
                    && enumerator10.MoveNext()
                    && enumerator11.MoveNext()
                )
                {
                    yield return resultSelector
                    (
                        enumerator1.Current,
                        enumerator2.Current,
                        enumerator3.Current,
                        enumerator4.Current,
                        enumerator5.Current,
                        enumerator6.Current,
                        enumerator7.Current,
                        enumerator8.Current,
                        enumerator9.Current,
                        enumerator10.Current,
                        enumerator11.Current
                    );
                }
            }
        }

        public static IEnumerable<TReturn> Zip<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>(IEnumerable<T1> arg1, IEnumerable<T2> arg2, IEnumerable<T3> arg3, IEnumerable<T4> arg4, IEnumerable<T5> arg5, IEnumerable<T6> arg6, IEnumerable<T7> arg7, IEnumerable<T8> arg8, IEnumerable<T9> arg9, IEnumerable<T10> arg10, IEnumerable<T11> arg11, IEnumerable<T12> arg12, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn> resultSelector)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (arg7 == null)
            {
                throw new ArgumentNullException("arg7");
            }
            if (arg8 == null)
            {
                throw new ArgumentNullException("arg8");
            }
            if (arg9 == null)
            {
                throw new ArgumentNullException("arg9");
            }
            if (arg10 == null)
            {
                throw new ArgumentNullException("arg10");
            }
            if (arg11 == null)
            {
                throw new ArgumentNullException("arg11");
            }
            if (arg12 == null)
            {
                throw new ArgumentNullException("arg12");
            }
            if (resultSelector == null)
            {
                throw new ArgumentNullException("resultSelector");
            }
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            using (var enumerator7 = arg7.GetEnumerator())
            using (var enumerator8 = arg8.GetEnumerator())
            using (var enumerator9 = arg9.GetEnumerator())
            using (var enumerator10 = arg10.GetEnumerator())
            using (var enumerator11 = arg11.GetEnumerator())
            using (var enumerator12 = arg12.GetEnumerator())
            {
                while
                (
                    enumerator1.MoveNext()
                    && enumerator2.MoveNext()
                    && enumerator3.MoveNext()
                    && enumerator4.MoveNext()
                    && enumerator5.MoveNext()
                    && enumerator6.MoveNext()
                    && enumerator7.MoveNext()
                    && enumerator8.MoveNext()
                    && enumerator9.MoveNext()
                    && enumerator10.MoveNext()
                    && enumerator11.MoveNext()
                    && enumerator12.MoveNext()
                )
                {
                    yield return resultSelector
                    (
                        enumerator1.Current,
                        enumerator2.Current,
                        enumerator3.Current,
                        enumerator4.Current,
                        enumerator5.Current,
                        enumerator6.Current,
                        enumerator7.Current,
                        enumerator8.Current,
                        enumerator9.Current,
                        enumerator10.Current,
                        enumerator11.Current,
                        enumerator12.Current
                    );
                }
            }
        }

        public static IEnumerable<TReturn> Zip<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>(IEnumerable<T1> arg1, IEnumerable<T2> arg2, IEnumerable<T3> arg3, IEnumerable<T4> arg4, IEnumerable<T5> arg5, IEnumerable<T6> arg6, IEnumerable<T7> arg7, IEnumerable<T8> arg8, IEnumerable<T9> arg9, IEnumerable<T10> arg10, IEnumerable<T11> arg11, IEnumerable<T12> arg12, IEnumerable<T13> arg13, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn> resultSelector)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (arg7 == null)
            {
                throw new ArgumentNullException("arg7");
            }
            if (arg8 == null)
            {
                throw new ArgumentNullException("arg8");
            }
            if (arg9 == null)
            {
                throw new ArgumentNullException("arg9");
            }
            if (arg10 == null)
            {
                throw new ArgumentNullException("arg10");
            }
            if (arg11 == null)
            {
                throw new ArgumentNullException("arg11");
            }
            if (arg12 == null)
            {
                throw new ArgumentNullException("arg12");
            }
            if (arg13 == null)
            {
                throw new ArgumentNullException("arg13");
            }
            if (resultSelector == null)
            {
                throw new ArgumentNullException("resultSelector");
            }
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            using (var enumerator7 = arg7.GetEnumerator())
            using (var enumerator8 = arg8.GetEnumerator())
            using (var enumerator9 = arg9.GetEnumerator())
            using (var enumerator10 = arg10.GetEnumerator())
            using (var enumerator11 = arg11.GetEnumerator())
            using (var enumerator12 = arg12.GetEnumerator())
            using (var enumerator13 = arg13.GetEnumerator())
            {
                while
                (
                    enumerator1.MoveNext()
                    && enumerator2.MoveNext()
                    && enumerator3.MoveNext()
                    && enumerator4.MoveNext()
                    && enumerator5.MoveNext()
                    && enumerator6.MoveNext()
                    && enumerator7.MoveNext()
                    && enumerator8.MoveNext()
                    && enumerator9.MoveNext()
                    && enumerator10.MoveNext()
                    && enumerator11.MoveNext()
                    && enumerator12.MoveNext()
                    && enumerator13.MoveNext()
                )
                {
                    yield return resultSelector
                    (
                        enumerator1.Current,
                        enumerator2.Current,
                        enumerator3.Current,
                        enumerator4.Current,
                        enumerator5.Current,
                        enumerator6.Current,
                        enumerator7.Current,
                        enumerator8.Current,
                        enumerator9.Current,
                        enumerator10.Current,
                        enumerator11.Current,
                        enumerator12.Current,
                        enumerator13.Current
                    );
                }
            }
        }

        public static IEnumerable<TReturn> Zip<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>(IEnumerable<T1> arg1, IEnumerable<T2> arg2, IEnumerable<T3> arg3, IEnumerable<T4> arg4, IEnumerable<T5> arg5, IEnumerable<T6> arg6, IEnumerable<T7> arg7, IEnumerable<T8> arg8, IEnumerable<T9> arg9, IEnumerable<T10> arg10, IEnumerable<T11> arg11, IEnumerable<T12> arg12, IEnumerable<T13> arg13, IEnumerable<T14> arg14, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn> resultSelector)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (arg7 == null)
            {
                throw new ArgumentNullException("arg7");
            }
            if (arg8 == null)
            {
                throw new ArgumentNullException("arg8");
            }
            if (arg9 == null)
            {
                throw new ArgumentNullException("arg9");
            }
            if (arg10 == null)
            {
                throw new ArgumentNullException("arg10");
            }
            if (arg11 == null)
            {
                throw new ArgumentNullException("arg11");
            }
            if (arg12 == null)
            {
                throw new ArgumentNullException("arg12");
            }
            if (arg13 == null)
            {
                throw new ArgumentNullException("arg13");
            }
            if (arg14 == null)
            {
                throw new ArgumentNullException("arg14");
            }
            if (resultSelector == null)
            {
                throw new ArgumentNullException("resultSelector");
            }
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            using (var enumerator7 = arg7.GetEnumerator())
            using (var enumerator8 = arg8.GetEnumerator())
            using (var enumerator9 = arg9.GetEnumerator())
            using (var enumerator10 = arg10.GetEnumerator())
            using (var enumerator11 = arg11.GetEnumerator())
            using (var enumerator12 = arg12.GetEnumerator())
            using (var enumerator13 = arg13.GetEnumerator())
            using (var enumerator14 = arg14.GetEnumerator())
            {
                while
                (
                    enumerator1.MoveNext()
                    && enumerator2.MoveNext()
                    && enumerator3.MoveNext()
                    && enumerator4.MoveNext()
                    && enumerator5.MoveNext()
                    && enumerator6.MoveNext()
                    && enumerator7.MoveNext()
                    && enumerator8.MoveNext()
                    && enumerator9.MoveNext()
                    && enumerator10.MoveNext()
                    && enumerator11.MoveNext()
                    && enumerator12.MoveNext()
                    && enumerator13.MoveNext()
                    && enumerator14.MoveNext()
                )
                {
                    yield return resultSelector
                    (
                        enumerator1.Current,
                        enumerator2.Current,
                        enumerator3.Current,
                        enumerator4.Current,
                        enumerator5.Current,
                        enumerator6.Current,
                        enumerator7.Current,
                        enumerator8.Current,
                        enumerator9.Current,
                        enumerator10.Current,
                        enumerator11.Current,
                        enumerator12.Current,
                        enumerator13.Current,
                        enumerator14.Current
                    );
                }
            }
        }

        public static IEnumerable<TReturn> Zip<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>(IEnumerable<T1> arg1, IEnumerable<T2> arg2, IEnumerable<T3> arg3, IEnumerable<T4> arg4, IEnumerable<T5> arg5, IEnumerable<T6> arg6, IEnumerable<T7> arg7, IEnumerable<T8> arg8, IEnumerable<T9> arg9, IEnumerable<T10> arg10, IEnumerable<T11> arg11, IEnumerable<T12> arg12, IEnumerable<T13> arg13, IEnumerable<T14> arg14, IEnumerable<T15> arg15, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn> resultSelector)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (arg7 == null)
            {
                throw new ArgumentNullException("arg7");
            }
            if (arg8 == null)
            {
                throw new ArgumentNullException("arg8");
            }
            if (arg9 == null)
            {
                throw new ArgumentNullException("arg9");
            }
            if (arg10 == null)
            {
                throw new ArgumentNullException("arg10");
            }
            if (arg11 == null)
            {
                throw new ArgumentNullException("arg11");
            }
            if (arg12 == null)
            {
                throw new ArgumentNullException("arg12");
            }
            if (arg13 == null)
            {
                throw new ArgumentNullException("arg13");
            }
            if (arg14 == null)
            {
                throw new ArgumentNullException("arg14");
            }
            if (arg15 == null)
            {
                throw new ArgumentNullException("arg15");
            }
            if (resultSelector == null)
            {
                throw new ArgumentNullException("resultSelector");
            }
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            using (var enumerator7 = arg7.GetEnumerator())
            using (var enumerator8 = arg8.GetEnumerator())
            using (var enumerator9 = arg9.GetEnumerator())
            using (var enumerator10 = arg10.GetEnumerator())
            using (var enumerator11 = arg11.GetEnumerator())
            using (var enumerator12 = arg12.GetEnumerator())
            using (var enumerator13 = arg13.GetEnumerator())
            using (var enumerator14 = arg14.GetEnumerator())
            using (var enumerator15 = arg15.GetEnumerator())
            {
                while
                (
                    enumerator1.MoveNext()
                    && enumerator2.MoveNext()
                    && enumerator3.MoveNext()
                    && enumerator4.MoveNext()
                    && enumerator5.MoveNext()
                    && enumerator6.MoveNext()
                    && enumerator7.MoveNext()
                    && enumerator8.MoveNext()
                    && enumerator9.MoveNext()
                    && enumerator10.MoveNext()
                    && enumerator11.MoveNext()
                    && enumerator12.MoveNext()
                    && enumerator13.MoveNext()
                    && enumerator14.MoveNext()
                    && enumerator15.MoveNext()
                )
                {
                    yield return resultSelector
                    (
                        enumerator1.Current,
                        enumerator2.Current,
                        enumerator3.Current,
                        enumerator4.Current,
                        enumerator5.Current,
                        enumerator6.Current,
                        enumerator7.Current,
                        enumerator8.Current,
                        enumerator9.Current,
                        enumerator10.Current,
                        enumerator11.Current,
                        enumerator12.Current,
                        enumerator13.Current,
                        enumerator14.Current,
                        enumerator15.Current
                    );
                }
            }
        }

        public static IEnumerable<TReturn> Zip<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>(IEnumerable<T1> arg1, IEnumerable<T2> arg2, IEnumerable<T3> arg3, IEnumerable<T4> arg4, IEnumerable<T5> arg5, IEnumerable<T6> arg6, IEnumerable<T7> arg7, IEnumerable<T8> arg8, IEnumerable<T9> arg9, IEnumerable<T10> arg10, IEnumerable<T11> arg11, IEnumerable<T12> arg12, IEnumerable<T13> arg13, IEnumerable<T14> arg14, IEnumerable<T15> arg15, IEnumerable<T16> arg16, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> resultSelector)
        {
            if (arg1 == null)
            {
                throw new ArgumentNullException("arg1");
            }
            if (arg2 == null)
            {
                throw new ArgumentNullException("arg2");
            }
            if (arg3 == null)
            {
                throw new ArgumentNullException("arg3");
            }
            if (arg4 == null)
            {
                throw new ArgumentNullException("arg4");
            }
            if (arg5 == null)
            {
                throw new ArgumentNullException("arg5");
            }
            if (arg6 == null)
            {
                throw new ArgumentNullException("arg6");
            }
            if (arg7 == null)
            {
                throw new ArgumentNullException("arg7");
            }
            if (arg8 == null)
            {
                throw new ArgumentNullException("arg8");
            }
            if (arg9 == null)
            {
                throw new ArgumentNullException("arg9");
            }
            if (arg10 == null)
            {
                throw new ArgumentNullException("arg10");
            }
            if (arg11 == null)
            {
                throw new ArgumentNullException("arg11");
            }
            if (arg12 == null)
            {
                throw new ArgumentNullException("arg12");
            }
            if (arg13 == null)
            {
                throw new ArgumentNullException("arg13");
            }
            if (arg14 == null)
            {
                throw new ArgumentNullException("arg14");
            }
            if (arg15 == null)
            {
                throw new ArgumentNullException("arg15");
            }
            if (arg16 == null)
            {
                throw new ArgumentNullException("arg16");
            }
            if (resultSelector == null)
            {
                throw new ArgumentNullException("resultSelector");
            }
            using (var enumerator1 = arg1.GetEnumerator())
            using (var enumerator2 = arg2.GetEnumerator())
            using (var enumerator3 = arg3.GetEnumerator())
            using (var enumerator4 = arg4.GetEnumerator())
            using (var enumerator5 = arg5.GetEnumerator())
            using (var enumerator6 = arg6.GetEnumerator())
            using (var enumerator7 = arg7.GetEnumerator())
            using (var enumerator8 = arg8.GetEnumerator())
            using (var enumerator9 = arg9.GetEnumerator())
            using (var enumerator10 = arg10.GetEnumerator())
            using (var enumerator11 = arg11.GetEnumerator())
            using (var enumerator12 = arg12.GetEnumerator())
            using (var enumerator13 = arg13.GetEnumerator())
            using (var enumerator14 = arg14.GetEnumerator())
            using (var enumerator15 = arg15.GetEnumerator())
            using (var enumerator16 = arg16.GetEnumerator())
            {
                while
                (
                    enumerator1.MoveNext()
                    && enumerator2.MoveNext()
                    && enumerator3.MoveNext()
                    && enumerator4.MoveNext()
                    && enumerator5.MoveNext()
                    && enumerator6.MoveNext()
                    && enumerator7.MoveNext()
                    && enumerator8.MoveNext()
                    && enumerator9.MoveNext()
                    && enumerator10.MoveNext()
                    && enumerator11.MoveNext()
                    && enumerator12.MoveNext()
                    && enumerator13.MoveNext()
                    && enumerator14.MoveNext()
                    && enumerator15.MoveNext()
                    && enumerator16.MoveNext()
                )
                {
                    yield return resultSelector
                    (
                        enumerator1.Current,
                        enumerator2.Current,
                        enumerator3.Current,
                        enumerator4.Current,
                        enumerator5.Current,
                        enumerator6.Current,
                        enumerator7.Current,
                        enumerator8.Current,
                        enumerator9.Current,
                        enumerator10.Current,
                        enumerator11.Current,
                        enumerator12.Current,
                        enumerator13.Current,
                        enumerator14.Current,
                        enumerator15.Current,
                        enumerator16.Current
                    );
                }
            }
        }
    }
}

#endif