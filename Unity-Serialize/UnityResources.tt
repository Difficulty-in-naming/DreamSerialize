<#@ template debug="false" hostspecific="true" language="C#" linePragmas="true" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Resources" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#
	var defaultLanguage = "en";
	var resourcesByCulture = new List<KeyValuePair<string,  Hashtable>>(new Dictionary<string,  Hashtable>
	{
		{"en", ReadResX(this.Host.ResolvePath(@"./Properties/Resources.resx"))}
	}).ToArray();

	Array.Sort(resourcesByCulture, (x,y) => x.Key == y.Key ? 0 :
											x.Key == defaultLanguage ? 1 :
											y.Key == defaultLanguage ? -1 :
											x.Key.CompareTo(y.Key));

#>
/*
	Copyright (c) 2016 Denis Zykov, GameDevWare.com

	This a part of "C# Eval()" Unity Asset - https://www.assetstore.unity3d.com/en/#!/content/56706

	THIS SOFTWARE IS DISTRIBUTED "AS-IS" WITHOUT ANY WARRANTIES, CONDITIONS AND
	REPRESENTATIONS WHETHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
	IMPLIED WARRANTIES AND CONDITIONS OF MERCHANTABILITY, MERCHANTABLE QUALITY,
	FITNESS FOR A PARTICULAR PURPOSE, DURABILITY, NON-INFRINGEMENT, PERFORMANCE
	AND THOSE ARISING BY STATUTE OR FROM CUSTOM OR USAGE OF TRADE OR COURSE OF DEALING.

	This source code is distributed via Unity Asset Store,
	to use it in your project you should accept Terms of Service and EULA
	https://unity3d.com/ru/legal/as_terms
*/
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: <#= Environment.Version #>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable All

namespace GameDevWare.Dynamic.Expressions.Properties
{
	using System;
	using System.Collections.Generic;

	/// <summary>
	/// Localization resource for current assembly
	/// </summary>
	public static class Resources
	{
		private static readonly string[] supportedLanguages = new string[] { <#= string.Join(", ", resourcesByCulture.Select(r => "\"" + r.Key.Replace("-", "_") + "\"").ToArray()) #> };
		[ThreadStatic]
		private static int currentLanguageIdx;

		/// <summary>
		/// List of supported localization languages. <seealso cref="CurrentLanguage"/>.
		/// </summary>
		public static string[] SupportedLanguages { get { return (string[])supportedLanguages.Clone(); } }
		/// <summary>
		/// Current selected language of localization.
		/// </summary>
		public static string CurrentLanguage
		{
			get { return supportedLanguages[currentLanguageIdx]; }
			set
			{
				if (value == null) throw new ArgumentNullException("value");
				var langIndex = Array.IndexOf(supportedLanguages, value);
				if (langIndex < 0) throw new ArgumentException("Unsupported language '" + value + "'.", "value");

				currentLanguageIdx = langIndex;
			}
		}

		/// <summary>
		/// Return all localization strings by current <see cref="CurrentLanguage"/>.
		/// </summary>
		public static Dictionary<string, string> All
		{
			get
			{
				return new Dictionary<string, string>(<#= resourcesByCulture[0].Value.Count #>)
				{
<#
	foreach(DictionaryEntry entry in resourcesByCulture[0].Value)
	{
#>
					{ "<#= entry.Key #>", <#= entry.Key #> },
<#
	}
#>
				};
			}
		}

<#
	foreach(DictionaryEntry entry in resourcesByCulture[0].Value)
	{
#>
		/// <summary>
		/// Localization string with key <#= entry.Key #>
		/// </summary>
		public static string <#= entry.Key #>
		{
			get
			{
				switch (currentLanguageIdx)
				{
<#
		for (var i = 0; i < resourcesByCulture.Length; i++)
		{
			var resourceByCulture = resourcesByCulture[i];
			var resources = resourceByCulture.Value;
#>					case <#= i #>: return "<#= Convert.ToString(resources[(string)entry.Key]).Replace(@"\", @"\\").Replace("\"", "\\\"") #>";
<#
		}
#>
					default: return "<#= entry.Key #>";
				}
			}
		}
<#
	}
#>
	}
}

<#+
public static Hashtable ReadResX(string path)
{
	var result = new Hashtable();
	var resourceReader = new ResXResourceReader(File.OpenRead(path));
	foreach(DictionaryEntry  kv in resourceReader)
		result[kv.Key] = kv.Value;

	return result;
}
#>
